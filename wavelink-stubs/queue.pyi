import asyncio
from collections import deque
from collections.abc import AsyncIterator, Iterable, Iterator
from typing import Any
from typing_extensions import Self

from .ext import spotify
from .tracks import Playable

__all__ = ("BaseQueue", "Queue")

class BaseQueue:
    _queue: deque[Playable | spotify.SpotifyTrack]

    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __bool__(self) -> bool: ...
    def __call__(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Playable | spotify.SpotifyTrack: ...
    def __setitem__(self, index: int, item: Playable | spotify.SpotifyTrack) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def __iter__(self) -> Iterator[Playable | spotify.SpotifyTrack]: ...
    def __reversed__(self) -> Iterator[Playable | spotify.SpotifyTrack]: ...
    def __contains__(self, item: Playable | spotify.SpotifyTrack) -> bool: ...
    def __add__(self, other: Iterable[Playable | spotify.SpotifyTrack]) -> Self: ...
    def __iadd__(self, other: Iterable[Playable | spotify.SpotifyTrack] | Playable | spotify.SpotifyTrack) -> Self: ...
    def _get(self) -> Playable | spotify.SpotifyTrack: ...
    def _drop(self) -> Playable | spotify.SpotifyTrack: ...
    def _index(self, item: Playable | spotify.SpotifyTrack) -> int: ...
    def _put(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def _insert(self, index: int, item: Playable | spotify.SpotifyTrack) -> None: ...
    @staticmethod
    def _check_playable(item: Playable | spotify.SpotifyTrack) -> Playable | spotify.SpotifyTrack: ...
    @classmethod
    def _check_playable_container(cls, iterable: Iterable[object]) -> list[Playable | spotify.SpotifyTrack]: ...
    @property
    def count(self) -> int: ...
    @property
    def is_empty(self) -> bool: ...
    def get(self) -> Playable | spotify.SpotifyTrack: ...
    def pop(self) -> Playable | spotify.SpotifyTrack: ...
    def find_position(self, item: Playable | spotify.SpotifyTrack) -> int: ...
    def put(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def put_at_index(self, index: int, item: Playable | spotify.SpotifyTrack) -> None: ...
    def put_at_front(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def shuffle(self) -> None: ...
    def extend(self, iterable: Iterable[Playable | spotify.SpotifyTrack], *, atomic: bool = True) -> None: ...
    def copy(self) -> Self: ...
    def clear(self) -> None: ...

class Queue(BaseQueue):
    history: BaseQueue
    _loop: bool
    _loop_all: bool
    _loaded: Playable | spotify.SpotifyTrack | None
    _waiters: deque[asyncio.Future[Any]]
    _finished: asyncio.Event

    def __init__(self) -> None: ...
    async def __aiter__(self) -> AsyncIterator[Playable | spotify.SpotifyTrack]: ...
    def get(self) -> Playable | spotify.SpotifyTrack: ...
    def _get(self) -> Playable | spotify.SpotifyTrack: ...
    async def _put(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def _insert(self, index: int, item: Playable | spotify.SpotifyTrack) -> None: ...
    def _wakeup_next(self) -> None: ...
    async def get_wait(self) -> Playable | spotify.SpotifyTrack: ...
    async def put_wait(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def put(self, item: Playable | spotify.SpotifyTrack) -> None: ...
    def reset(self) -> None: ...
    @property
    def loop(self) -> bool: ...
    @loop.setter
    def loop(self, value: bool) -> None: ...
    @property
    def loop_all(self) -> bool: ...
    @loop_all.setter
    def loop_all(self, value: bool) -> None: ...
